#!/usr/bin/env python
"""
footprinter

Create a Google Earth KML file containing polygons representing image
footprints when provided with photogrammetric exterior orientation parameters
(the x, y, z, and omega phi kappa coordinates of an aerial camera at the exact
moment a photo was taken), which can be provided in any coordinate system.

Usage:
    footprinter <input_file> <ground-height> <epsg-code> [--output-file=<output_file>]

Options:
    -h --help                   Show this screen.
    -g --ground-height          Average ground height.
    -c --epsg-code              EPSG code.
    --output-file=<output_file> Name of the file to output.

"""
import os
import sys

from docopt import docopt

from jinja2 import Environment, FileSystemLoader

from lib import Photo


def main(args):
    input_file = args['<input_file>']
    ground_height = int(args['<ground-height>'])
    epsg_code = int(args['<epsg-code>'])
    output_file = args['--output-file']
    input_lines = _get_input_lines(input_file)
    footprints = _get_footprints(input_lines, ground_height, epsg_code)
    _write_output_file(footprints, output_file)


def _write_output_file(footprints, output_file):
    env = Environment(loader=FileSystemLoader('.'))
    template = env.get_template('output_tmpl.kml')
    t = template.render(footprints=footprints)
    with open(output_file or 'output.kml', 'wb') as f:
        f.write(t)


def _get_footprints(input_lines, ground_height, epsg_code):
    footprints = []
    for line in input_lines:
        p = Photo(line, ground_height, epsg_code)
        p.compute_corner_coordinates()
        footprints.append(p)
    return footprints


def _get_input_lines(file_name):
    if not os.path.exists(file_name):
        print "File not found: {}".format(file_name)
        sys.exit(1)
    with open(file_name) as fp:
        return fp.readlines()


if __name__ == '__main__':
    main(docopt(__doc__))
